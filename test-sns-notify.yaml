AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Pipeline for Serverless Applications
Metadata: {}
Parameters:  
  AppName:
    Description: Specify application that uses the pipeline
    Type: String
    Default: baggage-app
  CostCenter:
    Description: Cost Center of the Application
    Type: String
    Default: Cloud
    AllowedPattern: .+
  Environment:
    Description: The Name of Environment
    Type: String
    Default: Dev
    AllowedValues:
      - Dev
      - SI
      - Prod
  PipelineEmailAddress:
    Type: String
    Description: Initial Email address to use for Pipeline notifications and approvals
    Default: emailsouravsinh@gmail.com
  RepoArtifactBucket:
    Description: Name of the bucket where the Application artifacts are stored
    Type: String
    Default: wdc-api-dvl
    AllowedPattern: .+
  RepoTemplateBucket:
    Description: Name of the bucket where the Application templates are stored
    Type: String
    Default: wdc-api-dvl
    AllowedPattern: .+    
  SupportGroup:
    Description: ServiceNow Event Management Incident Group
    Type: String
    Default: CloudTeam
    AllowedPattern: .+    


## Conditions

Conditions:
  ProdPipeline:
    !Or [!Equals [Prod, !Ref Environment], !Equals [SI, !Ref Environment]]

  DevPipeline:
    Fn::Equals: ["Dev", !Ref Environment]

Mappings: {}

Resources:

  CodePipelineArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'
  # CodePipelineArtifactStoreBucketPolicy:
  #   Type: 'AWS::S3::BucketPolicy'
  #   Properties:
  #     Bucket: !Ref CodePipelineArtifactStoreBucket
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Sid: DenyUnEncryptedObjectUploads
  #           Effect: Deny
  #           Principal: '*'
  #           Action: 's3:PutObject'
  #           Resource: !Join 
  #             - ''
  #             - - !GetAtt 
  #                 - CodePipelineArtifactStoreBucket
  #                 - Arn
  #               - /*
  #           Condition:
  #             StringNotEquals:
  #               's3:x-amz-server-side-encryption': 'aws:kms'
  #         - Sid: DenyInsecureConnections
  #           Effect: Deny
  #           Principal: '*'
  #           Action: 's3:*'
  #           Resource: !Join 
  #             - ''
  #             - - !GetAtt 
  #                 - CodePipelineArtifactStoreBucket
  #                 - Arn
  #               - /*
  #           Condition:
  #             Bool:
  #               'aws:SecureTransport': false

  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    #DeletionPolicy: Retain
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchEventsReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/AWSCloudFormationFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
      PermissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy/cft-developer-boundary-policy'
      RoleName: !Join 
        - '-'
        - - delegate-admin-wdc
          - !Ref AppName
          - cf-role
          - !Select
            - 0
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - '/'
                  - !Ref "AWS::StackId"         
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:PassRole
                  - lambda:*

  LambdaRole:
    Type: 'AWS::IAM::Role'
    #DeletionPolicy: Retain
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchEventsReadOnlyAccess'
      PermissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy/cft-developer-boundary-policy'
      RoleName: !Join
        - '-'
        - - delegate-admin-wdc
          - !Ref AppName
          - lambda-role   

  PipeLineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchEventsReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/AWSCloudFormationFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
      PermissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy/cft-developer-boundary-policy'
      RoleName: !Join 
        - '-'
        - - delegate-admin-wdc
          - !Ref AppName
          - pipeline-role
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - 'codepipeline:*'
                  - 'iam:ListRoles'
                  - 'iam:PassRole'
                  - 'sns:Publish'

  PipelineSNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: !Sub '${Environment}-${AppName}-pipeline-notification'
      Subscription:
        - Endpoint: !Ref PipelineEmailAddress
          Protocol: email

  lambdafunctionforslacknotify:
    Type: "AWS::Lambda::Function"
    Condition: ProdPipeline
    Properties: 
      FunctionName: notifyslackchannel
      Handler: "notifyslackchannel.lambda_handler"
      Code:
        S3Bucket: !Ref RepoTemplateBucket
        S3Key: 'notifyslackchannel.zip'
      Role: 
        Fn::GetAtt: 
        - "LambdaRole"
        - "Arn"
      Runtime: 'python3.7'

  SNSTopicForApproval:
    Type: 'AWS::SNS::Topic'
    DependsOn: lambdafunctionforslacknotify
    Condition: ProdPipeline
    Properties:
      TopicName: !Sub '${Environment}-${AppName}-approval'
      Subscription:
        - Endpoint: 
            Fn::GetAtt:
            - "lambdafunctionforslacknotify"
            - "Arn"
          Protocol: lambda



  wdcInfraPipelineDev:
    Type: 'AWS::CodePipeline::Pipeline'
    Condition: DevPipeline
    #DependsOn: PipelinePolicy
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket
      Name: !Sub '${Environment}-${AppName}'
      RoleArn: !GetAtt 
        - PipeLineRole
        - Arn
      Stages:

        # SOURCE
        - Name: Source
          Actions:
            - Name: AppArtifact
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: S3
              OutputArtifacts:
                - Name: !Sub SourceOutputArtifact
              Configuration:
                PollForSourceChanges: 'true'
                S3Bucket: !Ref RepoArtifactBucket
                S3ObjectKey: !Sub '${AppName}.jar'
              RunOrder: 1

            - Name: AppTemplate
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: S3
              OutputArtifacts:
                - Name: !Sub SourceOutputTptl
              Configuration:
                PollForSourceChanges: 'true'
                S3Bucket: !Ref RepoTemplateBucket
                S3ObjectKey: template.zip
              RunOrder: 1

        # DEPLOY              
        - Name: DeployCode
          Actions:
            - InputArtifacts:
                - Name: !Sub SourceOutputTptl
              Name: CreateUpdateLambda
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ChangeSetName: Deploy
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                RoleArn: !GetAtt PipeLineRole.Arn
                StackName: !Sub '${Environment}-${AppName}-Serverless-Stack'
                TemplatePath: !Sub 'SourceOutputTptl::serverless-template.yml'
              RunOrder: 1

  
  ##For Production code pipeline
  wdcInfraPipelineProd:
    Type: 'AWS::CodePipeline::Pipeline'
    Condition: ProdPipeline
    DependsOn: 
      #- PipelinePolicy
      - SNSTopicForApproval
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket
      Name: !Sub '${Environment}-${AppName}'
      RoleArn: !GetAtt 
        - PipeLineRole
        - Arn
      Stages:

        # SOURCE
        - Name: Source
          Actions:
            - Name: AppArtifact
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: S3
              OutputArtifacts:
                - Name: !Sub SourceOutputArtifact
              Configuration:
                PollForSourceChanges: 'true'
                S3Bucket: !Ref RepoArtifactBucket
                S3ObjectKey: !Sub '${AppName}.jar'
              RunOrder: 1

            - Name: AppTemplate
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: S3
              OutputArtifacts:
                - Name: !Sub SourceOutputTptl
              Configuration:
                PollForSourceChanges: 'true'
                S3Bucket: !Ref RepoTemplateBucket
                S3ObjectKey: template.zip
              RunOrder: 1
        
        ##Approval
        - Name: DeploymentApproval
          Actions:
            - Name: ApproveDeployment
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
              Configuration:
                NotificationArn: !Ref SNSTopicForApproval


        # DEPLOY              
        - Name: DeployCode
          Actions:
            - InputArtifacts:
                - Name: !Sub SourceOutputTptl
              Name: CreateUpdateLambda
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ChangeSetName: Deploy
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                RoleArn: !GetAtt PipeLineRole.Arn
                StackName: !Sub '${Environment}-${AppName}-Serverless-Stack'
                TemplatePath: !Sub 'SourceOutputTptl::serverless-template.yml'
              RunOrder: 1
  EventRuleForNotification: 
    Type: "AWS::Events::Rule"
    Properties: 
      Description: "EventRule For Notification"
      EventPattern: 
        source:
        - aws.codepipeline
        
        detail-type:
        - CodePipeline Pipeline Execution State Change
        detail:
          state:
          - "FAILED"
          - "SUCCEEDED"
          pipeline:
            - !If [ProdPipeline, !Ref wdcInfraPipelineProd, !Ref wdcInfraPipelineDev]
  
      State: "ENABLED"
      
      Targets: 
        - 
          Arn: 
            Ref: "PipelineSNSTopic"
          Id: "PipelineSNSTopic"
          InputTransformer:
            InputTemplate: '"The Pipeline <pipeline> has <pipeline-state>. Go to https://console.aws.amazon.com/codepipeline/home?region=us-east-1#/view/<pipeline>" '
            InputPathsMap:
              pipeline: "$.detail.pipeline"
              pipeline-state: "$.detail.state"
              
